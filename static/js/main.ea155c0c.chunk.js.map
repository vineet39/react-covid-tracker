{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","props","Card","className","CardContent","Typography","color","title","cases","total","Table","console","log","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","options","legend","display","elements","point","maintainAspectRatio","responsive","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","ChangeView","zoom","useMap","setView","Map","scrollWheelZoom","TileLayer","url","attribution","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","details","todayCases","todayRecovered","todayDeaths","caseTypes","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","items","Object","keys","key","onCountryChange","event","countryValue","target","r","onCaseTypeChange","caseType","name","iso2","sortedResponse","getCountriesData","FormControl","Select","variant","onChange","MenuItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea155c0c.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './InfoBox.css';\n\nexport default function InfoBox(props) {\n    return (\n        <Card className=\"infoBox\">\n            <CardContent>\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\n                    {props.title}\n                </Typography>\n                <Typography className=\"infoBox_cases\">\n                    {props.cases}\n                </Typography>\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\n                    {props.total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n","import React from 'react'\nimport classes from './Table.css';\n\nexport default function Table(props) {\n    console.log(props);\n    return (\n        <div className=\"table\">\n            {props.countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{cases}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n","import numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        rgb: \"rgb(204, 16, 52)\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 400,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        rgb: \"rgb(125, 215, 29)\",\n        half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 600,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        rgb: \"rgb(251, 68, 67)\",\n        half_op: \"rgba(251, 68, 67, 0.5)\",\n        multiplier: 1000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = data;\n\n    sortedData.sort((a, b) => {\n        if (a.cases > b.cases)\n            return -1;\n        else\n            return 1;\n    })\n    return sortedData;\n}\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport './LineGraph.css';\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: true,\n  responsive: true,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className=\"graph\">\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from 'react';\nimport { MapContainer as LeafletMap, TileLayer, useMap } from 'react-leaflet';\nimport './Map.css';\nimport { showDataOnMap } from \"./util\";\n\nfunction Map(props) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n                <ChangeView center={props.center} zoom={props.zoom} /> \n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(props.countries, props.casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nfunction ChangeView({ center, zoom }) {\n    const map = useMap();\n    map.setView(center, zoom);\n    return null;\n  } \nexport default Map;","import { useState, useEffect } from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport userEvent from '@testing-library/user-event';\nimport Table from './Table';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport Map from './Map';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [countries, setCountries] = useState(['USA', 'UK', 'INDIA'])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const details = {\n    cases: { title: \"Cases\", cases: countryInfo.todayCases, total: countryInfo.cases },\n    recovered: { title: \"Recovered\", cases: countryInfo.todayRecovered, total: countryInfo.recovered },\n    deaths: { title: \"Deaths\", cases: countryInfo.todayDeaths, total: countryInfo.deaths }\n  };\n  const caseTypes = {\n    cases: { title: 'New', value: 'cases' },\n    recovered: { title: 'Recovered', value: 'recovered' },\n    deaths: { title: 'Death', value: 'deaths' }\n  }\n  const [casesType, setCasesType] = useState(caseTypes.cases.value);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80, lng: -40.47 })\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const items = Object.keys(details).map(key =>\n    <InfoBox key={key} title={details[key].title} cases={details[key].cases} total={details[key].total} />\n  );\n  const onCountryChange = async (event) => {\n    const countryValue = event.target.value;\n    setCountry(countryValue);\n\n    const url = countryValue === 'worldwide' ? `https://disease.sh/v3/covid-19/all` : `https://disease.sh/v3/covid-19/countries/${countryValue}`;\n\n    await fetch(url)\n      .then(r => r.json())\n      .then(data => {\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n  }\n  const onCaseTypeChange = async (event) => {\n    const caseType = event.target.value;\n    setCasesType(caseType);\n  }\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(r => r.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then(response => response.json())\n        .then(response => {\n          const countries = response.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n          const sortedResponse = sortData(response);\n          setTableData(sortedResponse);\n          setCountries(countries);\n          setMapCountries(response);\n        });\n    }\n    getCountriesData();\n  }, [])\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl>\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}>\n              <MenuItem key='worldwide' value='worldwide'>World Wide</MenuItem>\n              {\n                countries.map(country => (\n                  <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          {items}\n        </div>\n        <Map center={mapCenter} zoom={mapZoom} countries={mapCountries}/>\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live cases</h3>\n          <Table countries={tableData} />\n          <div className=\"graph_heading\">\n            <h3 className=\"title\">Worldwide cases</h3>\n            <FormControl>\n              <Select\n                variant=\"outlined\"\n                value={casesType}\n                onChange={onCaseTypeChange}>\n                {\n                  Object.keys(caseTypes).map(key =>\n                    <MenuItem key={caseTypes[key].title} value={caseTypes[key].value}>{caseTypes[key].title}</MenuItem>\n                  )\n                }\n              </Select>\n            </FormControl>\n          </div>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}